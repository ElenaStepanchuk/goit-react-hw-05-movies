{"version":3,"file":"static/js/939.805e5fa5.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Loader.module.css?9d64","components/Loader.js","components/MovieDetailsPage.js","helpers/FetchFilms.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"LoaderBox\":\"Loader_LoaderBox__JKkW6\"};","import { BallTriangle } from 'react-loader-spinner';\nimport css from './Loader.module.css';\nconst Loader = () => {\n  return (\n    <div className={css.LoaderBox}>\n      <BallTriangle color=\"#00BFFF\" height={200} width={200} />\n    </div>\n  );\n};\nexport default Loader;\n","import { Link, useParams, Outlet, useLocation } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport { DetailsFilm } from '../helpers/FetchFilms';\nimport { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { FcLeft, FcClapperboard, FcVoicePresentation } from 'react-icons/fc';\nimport noPoster from '../images/no-poster.jpg';\nimport Loader from './Loader';\nconst WrapperDet = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin: 20px auto;\n  justify-content: center;\n  width: 460px;\n  padding: 20px;\n  color: white;\n`;\nconst TittleDet = styled.h2`\n  text-align: center;\n  font-weight: 800;\n  font-size: 30px;\n  text-transform: uppercase;\n`;\nconst SecondTittleDet = styled.h3`\n  font-weight: 800;\n  font-size: 20px;\n  text-transform: uppercase;\n  width: 460px;\n  text-align: center;\n`;\nconst SpanDet = styled.span`\n  font-weight: 400;\n  font-size: 20px;\n  text-transform: none;\n`;\nconst TextDet = styled.p`\n  font-weight: 400;\n  font-size: 20px;\n  text-transform: none;\n  text-align: justify;\n`;\nconst LinkADet = styled.a`\n  font-weight: 400;\n  font-size: 20px;\n  text-decoration: none;\n  color: white;\n  margin-bottom: 20px;\n  text-transform: none;\n`;\nconst DetailsLink = styled(Link)`\n  display: block;\n  margin-left: 20px;\n  background: rgb(0, 255, 255);\n  box-shadow: -1px -1px 9px 6px rgb(0, 255, 255, 0.5);\n  border: solid 1px rgb(0, 255, 255);\n  border-radius: 5px;\n  color: rgb(2, 16, 141);\n  text-align: center;\n  font-style: italic;\n  padding: 15px;\n  font-weight: 900;\n  font-size: 18px;\n  text-transform: uppercase;\n  text-decoration: none;\n`;\nconst BacklsLink = styled(Link)`\n  display: block;\n  background: rgb(0, 255, 255);\n  box-shadow: -1px -1px 9px 6px rgb(0, 255, 255, 0.5);\n  border: solid 1px rgb(0, 255, 255);\n  border-radius: 5px;\n  color: rgb(2, 16, 141);\n  text-align: center;\n  font-style: italic;\n  padding: 15px;\n  font-weight: 900;\n  font-size: 18px;\n  text-transform: uppercase;\n  text-decoration: none;\n`;\nconst MovieDetailsPage = () => {\n  const { movieId } = useParams();\n  const [detail, setDetail] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const location = useLocation();\n  useEffect(() => {\n    const GetDetails = async () => {\n      setLoading(true);\n      try {\n        const response = await DetailsFilm(movieId);\n        setDetail(response.data);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    GetDetails();\n  }, [movieId]);\n  return (\n    <WrapperDet>\n      {loading && <Loader />}\n      {detail && <TittleDet>{detail.original_title || detail.name}</TittleDet>}\n      <SecondTittleDet>\n        Release date:&nbsp;{detail && <SpanDet>{detail.release_date}</SpanDet>}\n      </SecondTittleDet>\n      {detail && detail.poster_path ? (\n        <img\n          src={`https://image.tmdb.org/t/p/w300${detail.poster_path}`}\n          alt={detail.original_title || detail.name}\n        />\n      ) : (\n        <img src={noPoster} alt={'Poster not available'} width=\"300px\" />\n      )}\n      <SecondTittleDet>\n        Genres:&nbsp;\n        {detail &&\n          detail.genres.map(genre => {\n            const id = nanoid();\n            return <SpanDet key={id}>&nbsp;{genre.name}</SpanDet>;\n          })}\n      </SecondTittleDet>\n      <SecondTittleDet>Descriptions: </SecondTittleDet>\n      {detail && <TextDet>{detail.overview}</TextDet>}\n      <SecondTittleDet>\n        Homepage:\n        {detail && (\n          <LinkADet href={`${detail.homepage}`}> Link to homepage</LinkADet>\n        )}\n      </SecondTittleDet>\n      <BacklsLink to={location?.state?.from || '/'}>\n        <FcLeft /> Go back\n      </BacklsLink>\n      <DetailsLink to={`/movies/${movieId}/cast`} state={{ from: location }}>\n        <FcClapperboard />\n        Cast\n      </DetailsLink>\n      <DetailsLink to={`/movies/${movieId}/reviews`} state={{ from: location }}>\n        <FcVoicePresentation />\n        Reviews\n      </DetailsLink>\n      <Outlet />\n    </WrapperDet>\n  );\n};\nexport default MovieDetailsPage;\n","import axios from 'axios';\nconst API_KEY = '19261be26ee50f4d2c275bad83bad0b4';\nexport const TrendingFilms = async page => {\n  return await axios.get(\n    `https://api.themoviedb.org/3/trending/all/week?api_key=${API_KEY}&page=${page}`\n  );\n};\nexport const DetailsFilm = async movieId => {\n  return await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n};\nexport const CastFilm = async movieId => {\n  return await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n};\nexport const ReviewsFilm = async movieId => {\n  return await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n};\nexport const SerchFilms = async (page, query) => {\n  return await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&page=${page}&include_adult=false&query=${query}`\n  );\n};\n"],"names":["className","css","color","height","width","WrapperDet","styled","TittleDet","SecondTittleDet","SpanDet","TextDet","LinkADet","DetailsLink","Link","BacklsLink","movieId","useParams","useState","detail","setDetail","loading","setLoading","location","useLocation","useEffect","GetDetails","DetailsFilm","response","data","console","log","original_title","name","release_date","poster_path","src","alt","noPoster","genres","map","genre","id","nanoid","overview","href","homepage","to","state","from","API_KEY","TrendingFilms","page","axios","CastFilm","ReviewsFilm","SerchFilms","query"],"sourceRoot":""}